slug: terraform-workshop-base
id: hi9eo2mucqot
type: track
title: Terraform Workshop Environment
teaser: |
  An instruqt track template that you can copy and use for in your own demos and workshops.
description: |-
  This track can be copied and used as a starting point for Azure, GCP or AWS Terraform workshops. You can use it as-is for freestyle training, or customize it for specific use cases.

  It comes with AWS, GCP and Azure credentials pre-installed and ready to use with Terraform. To use this track, simply copy the entire terraform-workshop-base directory and strip out all of the `id:` lines from your track.yml. Rename the tracks, create some content, run an `instruqt track push` and off you go.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- azure
- aws
- gcp
- template
owner: hashicorp
developers:
- roger@hashicorp.com
- lance@hashicorp.com
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: 2l7dzxr3bgya
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: |
    Configure your code editor with the Terraform extension and open a workspace.
  assignment: |-
    Open the Code Editor tab on the left. First get familiar with the menus. This is running the Visual Studio Code editor. You can also use the simpler "Text Editor" tab if you prefer.

    If you do use the VS Code Editor, please perform the following steps:

    Notice the menu bar with File, Edit, and other menus at the top of the VS Code Editor. You can find all the menus on this menu bar.

    You should see some files in the explorer bar on the left side menu. These are terraform config files for the hashicat application. Open file called "main.tf.

    Next you should install the Terraform extension to enable syntax highlighting in your code. Click on the extensions icon - it looks like four small boxes with one slightly out of position.

    Search for **Terraform** and be sure to select the "HashiCorp Terraform 2.x.y" extension. **Do not select the "Terraform 1.4.0" extension from mauve.** Click the green **Install** button to install the extension. Then click the **Reload Required** button to activate it. Then click the icon with two pages under the File menu so you can see your Terraform files again.

    We have enabled auto-save in your Code Editor, so any changes you make will be saved as you type. You don't have to worry about saving files manually.

    We recommend executing all commands on the "Shell" tab. But you can also open and use a terminal window at the bottom of the Visual Code Editor by using the Terminal > New Terminal menu or the **<ctrl>-`** shortcut.

    If you do use the VS Code terminal, you can toggle its size up and down with the `^` and inverted `^` buttons above it. You can get rid of it with the garbage can and `x` icons.

    Congratulations, you are ready to start working with Terraform.

    Click the **Check** button to continue.
  notes:
  - type: text
    contents: |
      Setting up your environment...
      Keep an eye on the bottom right corner to know when you can get started.
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  - type: text
    contents: The terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 28800
checksum: "1152631756001038093"
