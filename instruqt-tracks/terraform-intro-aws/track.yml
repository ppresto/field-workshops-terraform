slug: terraform-intro-aws
id: i3hihwd3qqr7
type: track
title: Intro to Terraform on AWS
teaser: |
  Provision the HashiCat application on AWS Cloud using Terraform.
description: |-
  This track will introduce you to Terraform on Amazon Web Services (AWS). We'll learn Terraform setup, basic commands, and gradually build an entire application stack. When you're finished you'll be able to view the HashiCat application in your
  web browser.

  Kittens as a Service!
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- aws
- basics
owner: hashicorp
developers:
- scarolan@hashicorp.com
- roger@hashicorp.com
- lance@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: udre6jbrj9po
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: |
    Configure your code editor with the Terraform extension and open a workspace.
  assignment: |-
    Open the Code Editor tab on the left. First get familiar with the menus. This is running the Visual Studio Code editor. You can also use the simpler "Text Editor" tab if you prefer.

    If you do use the VS Code Editor, please perform the following steps:

    Notice the menu bar with File, Edit, and other menus at the top of the VS Code Editor. You can find all the menus on this menu bar.

    You should see some files in the explorer bar on the left side menu. These are terraform config files for the hashicat application. Open file called "main.tf.

    Next you should install the HashiCorp Terraform extension to enable syntax highlighting in your code. Click on the extensions icon - it looks like four small boxes with one slightly out of position.

    Search for **HashiCorp** and select the "HashiCorp Terraform 2.x.y" extension. Click the green **Install** button to install the extension. Then click the **Reload Required** button to activate it. Then click the icon with two pages under the File menu so you can see your Terraform files again.

    If you see a popup saying that Terraform 0.8 is installed, just close it. We have updated Terraform for you. You can check the version by running `terraform version`.

    We have enabled auto-save in your Code Editor, so any changes you make will be saved as you type. You don't have to worry about saving files manually.

    We recommend executing all commands on the "Shell" tab. But you can also open and use a terminal window at the bottom of the Visual Code Editor by using the Terminal > New Terminal menu or the **<ctrl>-`** shortcut.

    If you do use the VS Code terminal, you can toggle its size up and down with the `^` and inverted `^` buttons above it. You can get rid of it with the garbage can and `x` icons.

    Congratulations, you are ready to start working with Terraform on AWS. We'll use the hashicat-aws example app in the rest of the challenges as you learn new Terraform skills.

    Click the **Check** button to continue.
  notes:
  - type: text
    contents: |
      Setting up your environment...
      Keep an eye on the bottom right corner to know when you can get started.
  - type: text
    contents: The Terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  - type: text
    contents: The Terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: hello-terraform
  id: xijpanmdkvsp
  type: challenge
  title: "\U0001F44B Getting to Know Terraform"
  teaser: |
    Learn Terraform basics and command line syntax.
  assignment: |-
    Let's start with some basic Terraform commands.
    Run the following commands in the "Shell" tab or in a terminal in the VS Code editor.

    Check the version of Terraform running on your machine:

    ```
    terraform version
    ```

    You can always get help if you're curious about command syntax:

    ```
    terraform help
    ```

    Terraform runs on Windows, OSX, or Linux. You can install it on your laptop or on a cloud based workstation.

    Today we'll be using the preconfigured Terraform workstation on the left for all our lab exercises.
  notes:
  - type: text
    contents: |-
      Terraform open source is a command line application that you can download and run from your laptop or virtual workstation.

      It is written in Go and runs on macOS, Linux or Windows. You can always download the latest version of Terraform from https://www.terraform.io/downloads.html
  - type: text
    contents: |-
      Installing Terraform on your laptop or workstation is easy. You simply download the zip file, unpack it, and place it somewhere in your PATH.

      Check out this tutorial for step-by-step instructions:

      https://learn.hashicorp.com/terraform/getting-started/install.html

      We've pre-installed Terraform in your Instruqt lab environment for you.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: aws-credentials
  id: vhz82xdtmp0i
  type: challenge
  title: "\U0001F510 Connecting Terraform to AWS"
  teaser: |
    Connecting to AWS with Access Keys and Secret Keys.
  assignment: |-
    In order to authenticate to AWS and build resources, Terraform requires you to provide a set of credentials, backed by an appropriate IAM policy.

    For this training environment, we have prepared some temporary AWS credentials and stored them as environment variables. Terraform will automatically read and use the environment variables that are configured in your shell environment.

    Run the following commands in the "Shell" tab or in a terminal in the VS Code editor to see your temporary credentials:

    ```
    echo $AWS_ACCESS_KEY_ID
    echo $AWS_SECRET_ACCESS_KEY
    ```

    *Do not ever store your credentials in source code files*, as they can be accidentally exposed or copied to a public repository.
  notes:
  - type: text
    contents: Did you know HCL stands for "HashiCorp Configuration Language"?
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-code
  id: d9ctdsqaj2jc
  type: challenge
  title: "\U0001F468‚Äç\U0001F4BB What does Terraform code look like?"
  teaser: |
    The Terraform DSL (Domain Specific Language) is a declarative language that lets you build almost any type of infrastructure.
  assignment: |-
    We've downloaded some Terraform code onto your workstation. Run the following command to see the Terraform code files:
      ```
      ls *.tf
      ```
      The same files are visible in the file explorer pane on the left. Terraform files are marked with the purple T icon.

      Terraform code always ends with a `.tf` extension. You can have as many Terraform files as you want, but these three are commonly created first:

      **main.tf** - Where most of your Terraform code is stored. This is the part that does the building of resources.<br>
      **variables.tf** - Use this file to define which variables will be available to your users.<br>
      **outputs.tf** - This file contains outputs that will be shown at the end of a successful Terraform run.

      Files that end in anything other than `*.tf` or `*.tfvars` are ignored by Terraform.
  notes:
  - type: text
    contents: |-
      Terraform will read anything in the current directory that ends in `*.tf` or `*.tfvars`.

      By convention most Terraform workspaces will contain `main.tf`, `variables.tf`, and `outputs.tf` files.

      You can also group your Terraform code into files by purpose. For example, you might place all your load balancer configuration code into a file called `load_balancer.tf`.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-init-provider
  id: qtnacizr5s9m
  type: challenge
  title: "\U0001F3E1 Terraform Init - Install the Providers"
  teaser: |
    Terraform needs a provider to talk to cloud APIs. The provider is the bridge that connects Terraform core to your infrastructure providers.
  assignment: |-
    We have downloaded some Terraform code for the HashiCat application. We'll be using this source code for the rest of the track.

    Before we can do anything with Terraform we need to initialize our workspace. Run the following command in your "Shell" tab:
    ```
    terraform init
    ```

    The `terraform init` command scans your Terraform code, identifies any providers that are needed, and downloads them.

    Run the following command to take a peek inside the `.terraform` directory:

    ```
    ls .terraform/plugins
    ```

    This hidden directory is where all modules and plugins are stored.
  notes:
  - type: text
    contents: |-
      The Terraform core program isn't very useful by itself. Terraform needs the help of a *provider* to be able to talk to cloud APIs. Terraform has hundreds of different providers. You can browse the provider list here:

      https://www.terraform.io/docs/providers/index.html

      Today we'll be using a few different providers, but the main one is the *aws* provider.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: provider-quiz
  id: jfdkfnzkik7b
  type: quiz
  title: "\U0001F4DD Quiz 1 - Providers and Modules"
  teaser: |
    A quiz about Terraform init
  assignment: |
    Where does Terraform store its modules and providers?
  notes:
  - type: text
    contents: |
      It's quiz time!
  answers:
  - In the /tmp directory
  - In the user's home directory
  - In the .terraform directory
  - None of the above
  solution:
  - 2
  difficulty: basic
  timelimit: 1000
- slug: terraform-validate
  id: gdxwnlmzxdzy
  type: challenge
  title: "\U0001F469‚Äç‚öñÔ∏è Terraform Validate - Test Your Code"
  teaser: |
    Terraform has a built in validation tester. This is useful to see whether your Terraform code is valid and parses correctly.
  assignment: |-
    Terraform comes with a built-in subcommand called *validate*. This is useful when you want to do a quick syntax check of your code to make sure it parses correctly.

    Click on the File Explorer icon on the left. It looks like a stack of papers.

    Edit the main.tf file and remove the double quotes between `aws_vpc` and `hashicat` on line 6 of the file, keeping the space that was between them.

    Validate your code:

    ```
    terraform validate
    ```

    Now put the double quotes back in line 6 and run the validate command again. This time you should pass the validation test.

    `terraform validate` is most often used in automated CI/CD test pipelines. It allows you to quickly catch errors in your code before any other steps are taken.
  notes:
  - type: text
    contents: Terraform has a built-in syntax checker. You can run it with the `terraform
      validate` command.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-plan
  id: xvujq4r12fer
  type: challenge
  title: "\U0001F914 Terraform Plan - Dry Run Mode"
  teaser: |
    Terraform has a dry run mode where you can preview what will be built without actually creating any resources. In this challenge we'll run `terraform plan` and view the output.
  assignment: |-
    Run the `terraform plan` command:

    ```
    terraform plan
    ```

    When you run this command Terraform will prompt you to enter the `prefix` variable.

    Enter a short string of lower-case letters and/or numbers. We recommend that you use your first and last name.

    The prefix will become part of the name for our VPC, subnet, EC2 instance and other resources.
  notes:
  - type: text
    contents: |-
      `terraform plan` allows you to preview any changes to your environment in a safe way.

      This can help you identify any unexpected changes before you deploy them, not after they are already built.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-variables
  id: m8xbdsgyynjc
  type: challenge
  title: "\U0001F39BÔ∏è Working with Terraform Variables"
  teaser: |
    Terraform variables allow you to customize your infrastructure without editing any code. You can use the same Terraform code to deploy dev, staging and production but with different variables.
  assignment: |-
    In Terraform all variables must be declared (with or without an optional default value) before you can use them. Variables are usually declared in the "variables.tf" file although they can also be declared in other "*.tf" files. Their values can be set in the "terraform.tfvars" file and in other ways which we'll explore later.

    Open the "terraform.tfvars" file and set your `prefix` variable by deleting the `# ` at the beginning of the line and replacing "yourname" with your own name (first and last with or without a hyphen between them and all lower case).

    Now run `terraform plan` again. This time you won't have to enter your prefix manually.
  notes:
  - type: text
    contents: The `terraform.tfvars` file is a convenient place for users to configure
      their variables.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-add-a-variable
  id: gnph0blobakx
  type: challenge
  title: "\U0001F5FC Change Your Location"
  teaser: |
    Terraform is flexible enough to deploy infrastructure anywhere in the world. You can easily provision your applications in different geographical regions by simply changing a single variable.
  assignment: |-
    In the previous challenge we set our `prefix` variable in the "terraform.tfvars" file. Let's set another variable that will determine the location where your AWS infrastructure will be deployed.

    First run another plan so you'll be able to compare what happens after you change the location.

    ```
    terraform plan
    ```

    Choose an AWS region near you but different from the default one which is "us-east-1". Add a `region` variable to your "terraform.tfvars" file, setting it to your desired region such as `us-west-1`, `eu-west-2`, or `ap-southeast-1`.

    See this [page](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions) for a list of valid AWS regions.

    Choosing a region close to you can help improve speed and performance.

    Once you've set your `region` variable, try running `terraform plan` again. What's different this time?

    Remember that you can set values for any variable declared in your "variables.tf" file in the "terraform.tfvars" file.
  notes:
  - type: text
    contents: |-
      You can override any variable defined in the "variables.tf" file by setting it in your personal `terraform.tfvars` file.

      In this challenge, you will pick the location where your AWS resources should be deployed.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: variables-quiz
  id: w6ugok0xie2q
  type: quiz
  title: "\U0001F4DD Quiz 2 - Variables"
  teaser: |
    A quiz about Terraform variables
  assignment: |
    Where are terraform variables *declared*?
  notes:
  - type: text
    contents: |
      Another quiz, get ready!
  answers:
  - On the command line
  - As environment variables
  - In the variables.tf file
  - In the terraform.tfvars file
  solution:
  - 2
  difficulty: basic
  timelimit: 1000
- slug: tf-graph
  id: ssak7o3k3wev
  type: challenge
  title: "\U0001F4C8 Terraform Graph"
  teaser: |
    Terraform creates a graph of all the infrastructure defined in your code.
  assignment: |-
    Try running the `terraform graph` command:

    ```
    terraform graph
    ```

    This generates code that can be used to create a visual map of your infrastructure. The graph data is in [DOT graph description language format](https://en.wikipedia.org/wiki/DOT_(graph_description_language)). There are several graphing tools you can use to visualize this data, including the free Blast Radius tool. You can learn more about Blast Radius here:

    https://28mm.github.io/blast-radius-docs/

    Start up a Blast Radius server with the following command:

    ```
    blast-radius --serve .
    ```

    Now switch to the **Terraform Graph** tab to view the infrastructure graph. If the web page is blank, you may need to click the refresh icon (which looks like a circular arrow)

    Explore the Terraform graph for your infrastructure. Dependencies are automatically mapped out for you. This graph was generated using the free Blast Radius tool.

    **NOTE:** Due to a known bug you may not be able to drag and zoom the graph. The main point of this exercise is to see how terraform maps out complex infrastructure. So don't worry if your graph doesn't show color.

    Terraform uses this graph to determine which resources can be built in parallel for maximum efficiency.
  notes:
  - type: text
    contents: Terraform Graph can provide a visual representation of all your infrastructure.
      This is handy for finding dependency issues or resources that will be affected
      by a change.
  tabs:
  - title: Command Line
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 1000
- slug: tf-plan-and-apply
  id: whomyx1qwy92
  type: challenge
  title: "\U0001F468‚Äç\U0001F4BB Terraform Plan and Terraform Apply"
  teaser: |
    The `terraform plan` command can be run anytime to get a preview of changes that Terraform might make. When you run Terraform apply these changes are implemented, and Terraform builds, updates, or destroys resources.
  assignment: |-
    Now that we've configured our required variables we can apply our changes.

    Run the `terraform plan` command first to see what will happen:

    ```
    terraform plan
    ```
    Confirm the proper prefix and location are displayed in the plan output.

    Then run `terraform apply` and watch your resources being built.

    ```
    terraform apply
    ```

    You'll need to enter **yes** when Terraform prompts you with the "Do you want to perform these actions?" question.

    Right now our code only defines a VPC. We'll be building upon this starting point in the next challenge.
  notes:
  - type: text
    contents: |-
      By default, the `terraform apply` command runs a Terraform plan to show you what changes it wants to make.

      Terraform maps out all the changes it needs to make before applying them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: tf-plan-again
  id: oy8oy1cypgga
  type: challenge
  title: "\U0001F469‚Äç\U0001F4BB Test and Repair"
  teaser: |
    Terraform is idempotent. Each resource in your code will be examined, and if it already exists Terraform will leave it alone.
  assignment: |-
    Try running `terraform plan` again and see what happens:

    ```
    terraform plan
    ```

    Since your VPC has already been built, Terraform will report that there are no changes required.

    This is normal and expected.

    Now try running another apply:

    ```
    terraform apply
    ```

    Terraform checks each resource to ensure it is in the proper state. It will not re-create your VPC if it is already provisioned correctly.
  notes:
  - type: text
    contents: |-
      Terraform is an *idempotent* application.

      Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application.

      https://en.wikipedia.org/wiki/Idempotence
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: change-prefix
  id: yetkjpluigvg
  type: challenge
  title: "\U0001F6EB Change Your Prefix"
  teaser: |
    When your Terraform code changes, your infrastructure will be modified to match the updated code. Terraform is a declarative language.
  assignment: |-
    Edit the `terraform.tfvars` file to change your prefix. You could simply add a number to the end if you like. Or change it to something entirely new.

    Save the `terraform.tfvars` file and run your apply command again.

    ```
    terraform apply
    ```

    Type "yes" when prompted.

    Observe the output. What happened?
  notes:
  - type: text
    contents: |-
      Terraform can create, destroy, update in place, or destroy and re-create your infrastructure. Some types of resources can be updated without deleting them. Major changes usually require a teardown and rebuild.

      Terraform always tries to match the current infrastructure to what has been defined in your code.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: add-a-tag
  id: 8g5jn5a3mxam
  type: challenge
  title: "\U0001F3F7Ô∏è Add a Tag to Your VPC"
  teaser: |
    Terraform can change some resources in in place without deleting them. Adding tags is a non-destructive action.
  assignment: |-
    Several resource types support AWS's tags. Read the Terraform documentation for the `aws_vpc` resource to learn about the `tags` argument and its format.

    [Terraform Docs: the aws_vpc resource - Click Here](https://www.terraform.io/docs/providers/aws/r/vpc.html)

    Add a tag to your VPC resource in the **main.tf** file. The name of the tag should be `environment` and the value should be `Production`. (The tag is case-sensitive. Make sure you use a capital P.)

    Hint: Read the examples carefully! Unlike the other resource arguments you've seen, the value of the `tags` argument must be a **map** (a `{key = "value"}` data structure). Additionally, you must use `=` after `tags` and after `environment`. For more about Terraform's data types, see the [Terraform language documentation](https://www.terraform.io/docs/configuration/expressions.html#types-and-values).

    Re-run `terraform apply`.

    What happens?
  notes:
  - type: text
    contents: Adding, changing, or removing tags is a non-destructive action. Terraform
      can tag your resources without re-creating them.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: add-virtual-network
  id: 0xekijrqwix6
  type: challenge
  title: "\U0001F5A7 Add a Virtual Network"
  teaser: |
    Terraform resources are like building blocks. You can continue adding more blocks until your infrastructure reaches the desired state.
  assignment: |-
    Open the **main.tf** file again and uncomment the next resource block in the file. The type of resource is **aws_subnet** and it is named **hashicat**.

    Uncomment the code by removing the `#` characters from the beginning of each line.

    Now run `terraform apply` again. Observe the results.

    Look at the **vpc_id** parameter inside the aws_subnet resource. See how it points back at the first resource in the file? The subnet resource inherits settings from the VPC.

    Terraform can map out the complex web of dependencies between hundreds of interconnected resources.
  notes:
  - type: text
    contents: Terraform code can be built incrementally, one or two resources at a
      time.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: complete-the-build
  id: hnlvhqi0wjdq
  type: challenge
  title: "\U0001F3D7Ô∏è Complete the Build"
  teaser: |
    Terraform code can stand up everything from VPCs, to virtual networks, to VMs and containers.
  assignment: |-
    We've uncommented all the rest of the Terraform code in the **main.tf** file for you. Run a `terraform plan` to see what will be built:

    ```
    terraform plan
    ```

    Now run an apply to build the HashiCat application:

    ```
    terraform apply -auto-approve
    ```

    It can take up to five minutes for the application to finish deploying. You will know it is complete when you see the Terraform output with your application URL at the end of the run.

    If the application won't load just run `terraform apply` again. This will attempt to reinstall the webserver and start your application if it's not running.

    Open your web application in a new browser tab. You'll need to copy and paste the URL into your address bar.
  notes:
  - type: text
    contents: The `-auto-approve` flag can be used to override the "Are you sure?"
      questions that appear before an apply or destroy. Use with caution!
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: tf-graph-again
  id: n6wxarjwpxc7
  type: challenge
  title: "\U0001F4C8 Terraform Graph"
  teaser: |
    Revisit graph to see what has changed.
  assignment: |-
    Start up a Blast Radius server with the following command:

    ```
    blast-radius --serve .
    ```

    Now switch to the **Terraform Graph** tab to view the infrastructure graph. If the web page is blank, you may need to click the refresh icon (which looks like a circular arrow)

    Explore the Terraform graph for your infrastructure. Dependencies are automatically mapped out for you. This graph was generated using the free Blast Radius tool.

    **NOTE:** Due to a known bug you may not be able to drag and zoom the graph. The main point of this exercise is to see how terraform maps out complex infrastructure. So don't worry if your graph doesn't show color.

    Terraform uses this graph to determine which resources can be built in parallel for maximum efficiency.
  notes:
  - type: text
    contents: Let's revisit our graph to see what has changed.
  tabs:
  - title: Command Line
    type: terminal
    hostname: workstation
  - title: Terraform Graph
    type: service
    hostname: workstation
    port: 5000
  difficulty: basic
  timelimit: 1000
- slug: terraform-apply-quiz
  id: bomlfx9yzrj7
  type: quiz
  title: "\U0001F4DD Quiz 3 - Terraform Apply"
  teaser: |
    What happens when you run `terraform apply` without a plan file?
  assignment: |
    What happens when you run `terraform apply` without specifying a plan file?
  notes:
  - type: text
    contents: |
      It's quiz time!
  answers:
  - Terraform runs without any plan
  - Terraform reads the previous plan and then applies it
  - Terraform runs a new plan right before the apply
  - None of the above
  solution:
  - 2
  difficulty: basic
  timelimit: 1000
- slug: use-a-provisioner
  id: yyq6do5aksyu
  type: challenge
  title: "\U0001F6E0Ô∏è Use a Provisioner"
  teaser: |
    Terraform works great with many different provisioning tools including Chef, Puppet, Ansible, Bash, and Powershell.
  assignment: |-
    Open the `main.tf` file in the Code Editor. Scroll down until you find the `remote-exec` provisioner block, or search the file and find it with CTRL-F.

    Add the following two lines at the end of the inline list of commands:

    ```
    "sudo apt -y install cowsay",
    "cowsay Mooooooooooo!",
    ```

    After copying them into your buffer, it will be easier to paste them if you hide the assignment by clicking the icon that looks like a picture frame next to the circular refresh icon. Click it again to redisplay the assignment.

    This might be a good time to use the `terraform fmt` command to line up the commands nicely.

    Now run another `terraform apply -auto-approve` to apply your changes:

    ```
    terraform apply -auto-approve
    ```

    Scroll back through the log output. You should see an ASCII art cow saying "Moooooooo!"
  notes:
  - type: text
    contents: Terraform provisioners run once at creation time. They do not run on
      subsequent applies, except in special circumstances. (Like this training lab...)
  - type: text
    contents: We've made some special adjustments to force the provisioner run every
      time you type terraform apply. This is so you can practice playing with provisioners
      without destroying and recreating your virtual machine every time you make a
      change.
  - type: text
    contents: |-
      ```
      ______________________
      < Cows love Terraform! >
       ----------------------
               \   ^__^
                \  (oo)\_______
                   (__)\       )\/\
                       ||----w |
                       ||     ||
      =============================
      ```
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: add-an-output
  id: wzrottlveoho
  type: challenge
  title: "\U0001F5A8Ô∏è Add an Output"
  teaser: |
    Outputs are used to convey useful information such as IP addresses, application URLs or other useful data.
  assignment: |-
    Open the **outputs.tf** file in the Code Editor. Note the public_dns output in the file.

    Add a second output for the `public_ip` of your web server. It's going to look almost exactly like the first output but will instead output an IP address instead of a DNS name.

    Name your output `catapp_ip`.

    You may refer to the docs page to see what types of outputs are valid:

    [Terraform AWS Docs - Click Here](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#attributes-reference)
    [Terraform Outputs Docs - Click Here](https://www.terraform.io/docs/configuration/outputs.html)

    Run the Terraform refresh command to view your new output:

    ```
    terraform refresh
    ```

    You can run the Terraform output command to view all your outputs:

    ```
    terraform output
    ```
  notes:
  - type: text
    contents: You can mix plain text along with Terraform data in your outputs. Outputs
      can be used to convey useful information to your users at the end of a run.
  - type: text
    contents: The `terraform refresh` command will sync your state file with what
      exists in your infrastructure. A refresh command will not change your infrastructure.
  - type: text
    contents: The `terraform output` command can be run any time you want to see your
      Terraform outputs again. Run `terraform output <output_name>` to view a single
      output.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: fun-with-variables
  id: mcwatgcefeve
  type: challenge
  title: "\U0001F436 Fun With Variables"
  teaser: |
    Variables give the consumers of your Terraform code an easy way to customize their infrastructure.
  assignment: |-
    There are several ways to configure Terraform variables. So far we've been using the `terraform.tfvars` file to set our variables. Try re-deploying your application with different **height** and **width** variables on the command line. Reload the webapp after each apply to observe any changes.

    ```
    terraform apply -auto-approve -var height=600 -var width=800
    ```

    Next try setting an environment variable that Terraform can read. Run this command to set the placeholder variable:

    ```
    export TF_VAR_placeholder=placedog.net
    ```

    Run another `terraform apply -auto-approve` command:

    ```
    terraform apply -auto-approve
    ```

    Now try it again with the same variable set differently on the command line:

    ```
    terraform apply -auto-approve -var placeholder=placebear.com
    ```

    Which variable took precedence? Why?

    See this [doc](https://www.terraform.io/docs/configuration/variables.html#variable-definition-precedence) if you're unsure.
  notes:
  - type: text
    contents: |-
      Terraform variables have five levels of precedence. 1=highest 5=lowest:

      1. Command line flag - run as a command line switch
      1. Configuration file - set in your terraform.tfvars file
      1. Environment variable - part of your shell environment
      1. Default Config - default value in variables.tf
      1. User manual entry - if not specified, prompt the user for entry
  - type: text
    contents: |-
      Here are some other fun placeholder sites you can try with the **placeholder** variable:

      placedog.net<br>
      placebear.com<br>
      www.fillmurray.com<br>
      www.placecage.com<br>
      placebeard.it<br>
      loremflickr.com<br>
      baconmockup.com<br>
      placeimg.com<br>
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-variables-quiz
  id: m6a1ehvo3xgz
  type: quiz
  title: "\U0001F4DD Quiz 4 - Terraform Variables"
  teaser: |
    How do Terraform variables get set or overridden?
  assignment: |
    You have the same variable set in a *.tfvars file and as an environment variable. Which one takes precedence?
  notes:
  - type: text
    contents: |
      Get ready for another quiz...
  answers:
  - The environment variable
  - The tfvars config file
  - The default value in variables.tf
  - None of the above
  solution:
  - 1
  difficulty: basic
  timelimit: 1000
- slug: terraform-cloud-setup
  id: hp0pnnjyqmjm
  type: challenge
  title: ‚òÅÔ∏è Terraform Cloud Setup
  teaser: |
    Terraform Cloud offers unlimited free Terraform state storage for users. Safeguard your state files by storing them remotely in Terraform Cloud.
  assignment: |-
    During this challenge and the next one, you'll use the remote state feature of Terraform Cloud to store your state file in the cloud. In order to do this you'll need a Terraform Cloud account. Click on the URL below and sign up for a free account if you don't have one already:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Once you're signed into Terraform Cloud create a new organization called YOURNAME-training. Replace YOURNAME with your own name or other text.

    Next you'll be prompted to create a workspace. You can skip the VCS integration step by clicking the "CLI-driven workflow" panel. Name your workspace **hashicat-aws**.

    **Note:** If you already have a **hashicat-aws** workspace, please delete the workspace by selecting the **Settings >> Destruction and Deletion** menu, clicking the "Delete from Terraform Cloud" button, typing "hashicat-aws" to confirm, and then clicking the "Delete workspace" button. Then re-create it as above. Doing this avoids possible problems with mis-matched state versions when executing local runs after having executed remote runs. This could happen if you played the [Terraform Cloud with AWS](https://play.instruqt.com/hashicorp/tracks/terraform-cloud-aws) track and then played this track.

    Run `terraform version` on the "Shell" tab and then set the **Terraform Version** to match on the workspace's **Settings >> General** settings page.

    Also, change the **Execution Mode** to **Local**.

    Be sure to save your settings by clicking the "Save settings" button at the bottom of the page! This will allow us to run Terraform commands from our workstation with local variables, which we'll do in the next challenge.
  notes:
  - type: text
    contents: Terraform Cloud remote state storage is free for all users.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: configure-remote-state
  id: 3iunuxtrpnb6
  type: challenge
  title: "\U0001F39BÔ∏è Configure Remote State"
  teaser: |
    The terraform command line tool can store its state in Terraform Cloud. All that is required is a user token.
  assignment: |-
    During this challenge we'll configure Terraform Cloud as a remote state backend, and then migrate our existing state file to Terraform Cloud.

    Edit the `remote_backend.tf` file and replace the YOURORGANIZATION and YOURWORKSPACE placeholders with your org name and workspace name.

    Let's generate a new **user token** for use on your workstation. Visit the User Settings > Tokens page in Terraform Cloud:

    https://app.terraform.io/app/settings/tokens

    Click on the **Create an API token** button. You can name the token whatever you like. Copy the entire token using your mouse or the small copy-paste icon.

    Back in the Instruqt track, you need to add your API token to a file called "credentials.tfrc.json". You can do this in two different ways:

    The easier way is to select the "Credentials File" tab and open the `/root/.terraform.d/credentials.tfrc.json` file directly.

    But if you prefer to use the VS Code Editor, you can use the File > Open menu, click on "..", select ".terraform.d", and then select the "credentials.tfrc.json" file.

    In either case, replace the part that says YOURTOKEN with what you copied from Terraform Cloud. If you use the "Credentials File" tab,  sure to save the file.

    Your token is now safely stored in the `/root/.terraform.d/credentials.tfrc.json` file.

    Now run `terraform init` to migrate your state to Terraform Cloud.

    ```
    terraform init
    ```

    Type "yes" when it prompts you to migrate your state into Terraform Cloud.

    Your state is now safely stored in Terraform Cloud.

    Run a `terraform apply -auto-approve` and watch your state file evolve with each change. You can browse through previous state files with the Terraform Cloud UI.
  notes:
  - type: text
    contents: |-
      With *local* execution mode the Terraform commands and variables all remain
      on your workstation.

      With *remote* execution mode Terraform runs in a Terraform Cloud
      container environment. All variables must be configured in the cloud environment with this method.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Credentials File
    type: code
    hostname: workstation
    path: /root/.terraform.d/credentials.tfrc.json
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
- slug: terraform-destroy
  id: watj5kondoxx
  type: challenge
  title: "\U0001F525 Terraform Destroy"
  teaser: |
    Terraform can build infrastructure and also destroy it when you are done using it. This helps control costs and reduce infrastructure sprawl.
  assignment: |-
    Run the following command to destroy your infrastructure:

    ```
    terraform destroy
    ```

    You'll need to type "yes" when prompted to destroy your infrastructure. This is a safety feature to help prevent accidental deletion of important resources.

    Wait until the destroy action has completely finished before clicking on the **Check** button.
  notes:
  - type: text
    contents: |-
      Terraform can destroy infrastructure as easily as it can build it.

      Use `terraform destroy` with caution.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 1000
checksum: "7447299001212280757"
